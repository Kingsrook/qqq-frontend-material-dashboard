###############################################################################
## 
## CircleCI Configuration for QQQ Frontend Material Dashboard
## =========================================================
##
## This configuration implements a GitFlow-based CI/CD strategy for the frontend dashboard,
## following the same versioning and branching policies as the main QQQ project.
##
## 🚀 WORKFLOWS OVERVIEW:
## ----------------------
## 1. test_only          - Feature branches (build, test, integration test, coverage)
## 2. deploy_snapshot    - develop branch (publishes -SNAPSHOT versions)
## 3. release_candidate  - release/* branches (publishes -RC.n versions)
## 4. production_release - main branch (publishes stable versions + GitHub releases)
## 5. hotfix_release     - hotfix/* branches (publishes patch versions + GitHub releases)
##
## 🌿 GITFLOW BRANCHING STRATEGY:
## ------------------------------
## - main: Production releases (X.Y.Z) → Maven Central releases repository
## - develop: Development snapshots (X.Y.Z-SNAPSHOT) → Maven Central snapshots repository  
## - release/*: Release candidates (X.Y.0-RC.n) → Maven Central releases repository
## - hotfix/*: Hotfix releases (X.Y.(Z+1)) → Maven Central releases repository
## - feature/*: Feature development → Build and test only (no publishing)
##
## 🔄 VERSION MANAGEMENT:
## ---------------------
## - Maven versions: Automatically calculated using .circleci/calculate-version.sh
## - NPM sync: package.json version automatically synced with Maven pom.xml
## - GitFlow versioning: RC increments, hotfix patches, develop bumps
## - Automatic Git tags: vX.Y.Z format (e.g., v1.0.0)
## - GitHub releases: Created automatically for production and hotfix releases
## - Maven Central: Publishing via central-publishing-maven-plugin
##
## 🔐 AUTHENTICATION & SECURITY:
## -----------------------------
## - Maven Central: CENTRAL_USERNAME, CENTRAL_PASSWORD
## - GPG Signing: GPG_PRIVATE_KEY_B64, GPG_KEYNAME, GPG_PASSPHRASE
## - GitHub Integration: GITHUB_TOKEN (for creating releases and tags)
## - All artifacts are GPG signed for verification
## - Credentials stored securely as environment variables
##
## 🛠️ BUILD TOOLS & DEPENDENCIES:
## ------------------------------
## - localstack/platform@2.1: Consistent execution environment
## - browser-tools@1.4.7: Chrome/ChromeDriver for testing
## - Maven: Java build tool and dependency management
## - Node.js: JavaScript runtime and package management
## - npm: Node.js package manager with React build tools
##
## 📁 KEY SCRIPTS & FILES:
## ------------------------
## - calculate-version.sh: Maven version management based on branch type
## - sync-npm-version.sh: NPM version synchronization with Maven
## - mvn-settings.xml: Maven Central repository configuration
## - config.yml: This CircleCI configuration file
##
## 🎯 VERSION PATTERNS BY BRANCH:
## ------------------------------
## | Branch Type | Version Pattern | Example | Repository |
## |-------------|----------------|---------|------------|
## | main        | X.Y.Z          | 1.0.0   | Maven Central (releases) |
## | develop     | X.Y.Z-SNAPSHOT | 1.0.0-SNAPSHOT | Maven Central (snapshots) |
## | release/*   | X.Y.0-RC.n     | 1.0.0-RC.1 | Maven Central (releases) |
## | hotfix/*    | X.Y.(Z+1)      | 1.0.1   | Maven Central (releases) |
## | feature/*   | Inherits from develop | 1.0.0-SNAPSHOT | No publishing |
##
###############################################################################
version: 2.1

###############################################################################
## ORBS (Reusable CI Components)
## =============================
## localstack/platform@2.1: Provides consistent execution environment across all jobs
## browser-tools@1.4.7: Installs Chrome and ChromeDriver for browser-based testing
###############################################################################
orbs:
  localstack: localstack/platform@2.1
  browser-tools: circleci/browser-tools@1.4.7
  slack: circleci/slack@5.2.1

###############################################################################
## COMMANDS (Reusable Step Collections)
## ===================================
## These commands define common operations that can be reused across multiple jobs
## to avoid duplication and ensure consistency.
###############################################################################
commands:

  ###############################################################################
  ## 🏗️ FRONTEND BUILD COMMAND
  ## ==========================
  ## Builds the frontend project and sets up the complete development environment
  ## 
  ## What it does:
  ## - Restores Maven dependency cache for faster builds
  ## - Restores NPM dependency cache for faster builds  
  ## - Installs Chrome/ChromeDriver for browser testing
  ## - Installs Node.js dependencies (npm ci --legacy-peer-deps)
  ## - Compiles the project with Maven (Java components)
  ## - Builds React application (npm run build)
  ## - Saves both Maven and NPM caches for future builds
  ##
  ## Cache Strategy:
  ## - Maven: Based on pom.xml checksum
  ## - NPM: Based on package.json checksum
  ## - Both caches are saved together for consistency
  ###############################################################################
  frontend_build:
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "pom.xml" }}
            - v1-npm-dependencies-{{ checksum "package.json" }}
      - browser-tools/install-chrome
      - browser-tools/install-chromedriver
      - run:
          name: Install Node.js dependencies
          command: |
            npm ci --legacy-peer-deps
      - run:
          name: Run Maven Compile
          command: |
            mvn -s .circleci/mvn-settings.xml -T4 --no-transfer-progress compile
      - run:
          name: Build React application
          command: |
            npm run build
      - save_cache:
          paths:
            - ~/.m2
            - node_modules
          key: v1-dependencies-{{ checksum "pom.xml" }}

  ###############################################################################
  ## 🧪 FRONTEND TEST COMMAND
  ## =========================
  ## Runs comprehensive testing for both Maven (Java) and NPM (React) components
  ## 
  ## What it does:
  ## - Runs Maven verify lifecycle (compile, test, package, verify)
  ## - Executes NPM tests with coverage (--coverage --passWithNoTests)
  ## - Collects and stores test artifacts for analysis
  ## - Stores coverage reports for quality metrics
  ##
  ## Test Coverage:
  ## - Maven: Java unit tests and integration tests
  ## - NPM: React component tests and JavaScript unit tests
  ## - Coverage reports stored as CircleCI artifacts
  ###############################################################################
  frontend_test:
    steps:
      - run:
          name: Run Maven Verify
          command: |
            mvn -s .circleci/mvn-settings.xml -T4 --no-transfer-progress verify
      - run:
          name: Run NPM tests
          command: |
            npm test -- --watchAll=false --coverage --passWithNoTests
      - store_artifacts:
          path: coverage
          destination: test-coverage
          when: always
      - store_artifacts:
          path: target/surefire-reports
          destination: surefire-reports
          when: always

  ###############################################################################
  ## 🚀 FRONTEND INTEGRATION TEST COMMAND
  ## =====================================
  ## Runs integration tests with the React app running
  ## 
  ## What it does:
  ## - Sets up environment variables for React app
  ## - Starts React app in background
  ## - Waits for app to be ready using dockerize
  ## - Runs Maven verify with app running
  ## - Collects test results and screenshots
  ##
  ## Integration Testing:
  ## - React app runs on port 3001
  ## - Proxy configured for localhost:8001
  ## - Selenium tests run against running app
  ## - Screenshots captured for debugging
  ###############################################################################
  frontend_integration_test:
    steps:
      - run:
          name: Install dockerize
          command: |
            wget https://github.com/jwilder/dockerize/releases/download/v0.3.0/dockerize-linux-amd64-v0.3.0.tar.gz
            sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-v0.3.0.tar.gz
            rm dockerize-linux-amd64-v0.3.0.tar.gz
      - run:
          name: Install browser dependencies
          command: |
            sudo apt update
            sudo apt install -y libnss3-dev libgdk-pixbuf2.0-dev libgtk-3-dev libxss-dev
      - run:
          name: Setup React app environment
          command: |
            echo "HTTPS=true" >> ./.env
            export REACT_APP_PROXY_LOCALHOST_PORT=8001
            export PORT=3001
            export QQQ_SELENIUM_HEADLESS=true
      - run:
          name: Start React app and run integration tests
          command: |
            npm run start &
            dockerize -wait tcp://localhost:3001 -timeout 3m
            mvn -s .circleci/mvn-settings.xml verify
      - run:
          name: Save test results
          command: |
            mkdir -p ~/test-results/junit/
            find . -type f -regex ".*/target/surefire-reports/.*xml" -exec cp {} ~/test-results/junit/ \;
          when: always
      - store_test_results:
          path: ~/test-results
      - store_artifacts:
          path: /tmp/QSeleniumScreenshots
          when: always

  ###############################################################################
  ## 📦 MAVEN CENTRAL PUBLISHING COMMAND
  ## ===================================
  ## Publishes signed artifacts to Maven Central (Sonatype Central Portal)
  ## 
  ## What it does:
  ## - Sets up GPG signing for artifact verification and security
  ## - Deploys signed artifacts to Maven Central using release profile
  ## - Handles authentication and repository configuration
  ## - Saves Maven cache for future builds
  ##
  ## Security Features:
  ## - GPG signing for all artifacts (verification)
  ## - Secure credential management via environment variables
  ## - Repository isolation (snapshots vs releases)
  ###############################################################################
  mvn_jar_deploy:
    steps:
      - run:
          name: Setup GPG for signing
          command: |
            mkdir -p ~/.gnupg
            echo 'pinentry-mode loopback' > ~/.gnupg/gpg.conf
            chmod 600 ~/.gnupg/gpg.conf
            echo $GPG_PRIVATE_KEY_B64| tr -d ' \r\n\t' | base64 -d | gpg --batch --import 
      - run:
          name: Publish to Sonatype Central (releases and SNAPSHOTs)
          command: |
            mvn -s .circleci/mvn-settings.xml -P release -B -DskipTests -Dgpg.keyname=$GPG_KEYNAME -Dgpg.passphrase=$GPG_PASSPHRASE deploy
      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ checksum "pom.xml" }}

  ###############################################################################
  ## 📦 FRONTEND PACKAGING COMMAND
  ## =============================
  ## Packages the React app into the Maven JAR for distribution
  ## 
  ## What it does:
  ## - Removes old material-dashboard resources
  ## - Creates new material-dashboard directory
  ## - Copies built React app to Maven resources
  ## - Prepares JAR for deployment
  ##
  ## Frontend Integration:
  ## - React build artifacts packaged into Maven JAR
  ## - Enables distribution as single artifact
  ## - Maintains frontend-backend integration
  ###############################################################################
  frontend_package:
    steps:
      - run:
          name: Package React app into Maven JAR
          command: |
            rm -rf src/main/resources/material-dashboard
            mkdir -p src/main/resources/material-dashboard
            cp -r build/* src/main/resources/material-dashboard

  ###############################################################################
  ## 🔄 VERSION MANAGEMENT COMMAND
  ## =============================
  ## Automated version management for GitFlow branching strategy
  ## 
  ## What it does:
  ## - Determines appropriate version based on branch type and current version
  ## - Uses versions-maven-plugin to update pom.xml automatically
  ## - Synchronizes NPM version with Maven version using sync-npm-version.sh
  ## - Handles GitFlow versioning strategy automatically
  ## - Commits and pushes version changes to maintain consistency
  ##
  ## Version Strategy:
  ## - develop: Bumps to next minor version (X.Y+1.0-SNAPSHOT)
  ## - release/*: Increments RC number (X.Y.0-RC.n)
  ## - hotfix/*: Bumps patch version (X.Y.Z+1)
  ## - feature/*: No version changes (inherits from develop)
  ###############################################################################
  manage_version:
    steps:
      - add_ssh_keys   # injects the CircleCI User Key (write-capable)
      - run:
          name: Set up Git identity for version commits
          command: |
            git config user.email "ci@kingsrook.com"
            git config user.name "CircleCI"
      - run:
          name: Calculate and set Maven version
          command: |
            chmod +x .circleci/calculate-version.sh
            .circleci/calculate-version.sh
      - run:
          name: Synchronize NPM version with Maven version
          command: |
            chmod +x sync-npm-version.sh
            ./sync-npm-version.sh
      - run:
          name: Commit version changes if modified
          command: |
            if [[ -n "$(git status --porcelain pom.xml package.json)" ]]; then
              NEW_VERSION=$(grep '<revision>' pom.xml | sed 's/.*<revision>//;s/<.*//')
              git add pom.xml package.json
              git commit -m "Bump version to $NEW_VERSION [skip ci]"
              git push origin "HEAD:${CIRCLE_BRANCH}"
              echo "Version updated to: $NEW_VERSION and pushed"
            else
              echo "No version change needed"
            fi

  ###############################################################################
  ## 🏷️ GITHUB RELEASE CREATION COMMAND
  ## ===================================
  ## Creates Git tags and GitHub releases for production and hotfix releases
  ## 
  ## What it does:
  ## - Creates version tag from pom.xml revision (vX.Y.Z format)
  ## - Pushes tag to remote repository for version tracking
  ## - Creates GitHub release with automated notes and descriptions
  ## - Links releases to specific Git commits for traceability
  ##
  ## Release Types:
  ## - Production releases: Stable versions from main branch
  ## - Hotfix releases: Patch versions from hotfix branches
  ## - All releases include Git tags and GitHub release notes
  ###############################################################################
  create_github_release:
    steps:
      - run:
          name: Create and push version tag
          command: |
            VERSION=$(grep '<revision>' pom.xml | sed 's/.*<revision>//;s/<.*//')
            echo "Creating tag for version: $VERSION"
            
            # Create and push tag (if not already created)
            if ! git tag --list | grep -q "v$VERSION"; then
              git tag "v$VERSION"
              git push origin "v$VERSION"
              echo "Tag v$VERSION created and pushed"
            else
              echo "Tag v$VERSION already exists"
            fi
            
            # Create GitHub release
            echo "Creating GitHub release for v$VERSION"
            echo "$GITHUB_TOKEN" | gh auth login --with-token
            gh release create "v$VERSION" \
              --title "Release v$VERSION" \
              --notes "Automated release from CircleCI" \
              --repo Kingsrook/qqq-frontend-material-dashboard

###############################################################################
## JOBS (Workflow Execution Units)
## ===============================
## Jobs define the actual work to be done in each workflow.
## Each job uses the localstack/default executor for consistent environment.
###############################################################################
jobs:

  ###############################################################################
  ## 🏗️ BUILD JOB
  ## =============
  ## Basic build job that compiles the frontend project
  ## 
  ## Purpose: Compile and build the complete frontend application
  ## Used by: test_only workflow for feature branches
  ## 
  ## What it does:
  ## - Sets up development environment
  ## - Installs all dependencies (Maven + NPM)
  ## - Compiles Java components with Maven
  ## - Builds React application with npm
  ## - Manages dependency caching for performance
  ###############################################################################
  build:
    executor: localstack/default
    steps:
      - frontend_build

  ###############################################################################
  ## 🧪 TEST JOB
  ## ===========
  ## Comprehensive testing job that runs all tests
  ## 
  ## Purpose: Validate code quality and functionality
  ## Used by: test_only workflow for feature branches
  ## Dependencies: Requires build job to complete first
  ## 
  ## What it does:
  ## - Runs Maven verify lifecycle (compile, test, package, verify)
  ## - Executes NPM tests with coverage reporting
  ## - Collects test artifacts and coverage reports
  ## - Stores results as CircleCI artifacts for analysis
  ###############################################################################
  test:
    executor: localstack/default
    steps:
      - frontend_test

  ###############################################################################
  ## 🚀 INTEGRATION TEST JOB
  ## ========================
  ## Runs integration tests with React app running
  ## 
  ## Purpose: Test frontend-backend integration
  ## Used by: test_only workflow for feature branches
  ## Dependencies: Requires build job to complete first
  ## 
  ## What it does:
  ## - Starts React app in background
  ## - Waits for app to be ready
  ## - Runs Maven verify with app running
  ## - Collects test results and screenshots
  ###############################################################################
  integration_test:
    executor: localstack/default
    steps:
      - frontend_integration_test

  ###############################################################################
  ## 📦 SNAPSHOT DEPLOYMENT JOB
  ## ===========================
  ## Deploys snapshot versions to Maven Central
  ## 
  ## Purpose: Provide nightly builds for developers and QA testing
  ## Used by: deploy_snapshot workflow for develop branch
  ## Publishes: X.Y.Z-SNAPSHOT versions to snapshots repository
  ## 
  ## What it does:
  ## - Builds the complete frontend project
  ## - Manages versions (Maven + NPM sync)
  ## - Runs comprehensive tests
  ## - Deploys to Maven Central snapshots repository
  ## - Enables continuous integration and nightly builds
  ###############################################################################
  mvn_deploy:
    executor: localstack/default
    steps:
      - frontend_build
      - manage_version
      - frontend_test
      - frontend_package
      - mvn_jar_deploy

  ###############################################################################
  ## 🧪 RELEASE CANDIDATE JOB
  ## =========================
  ## Publishes release candidate versions to Maven Central
  ## 
  ## Purpose: Provide RC builds for QA testing and stakeholder review
  ## Used by: release_candidate workflow for release/* branches
  ## Publishes: X.Y.0-RC.n versions to releases repository
  ## 
  ## What it does:
  ## - Builds the complete frontend project
  ## - Runs comprehensive tests for quality assurance
  ## - Manages versions (RC increments)
  ## - Deploys to Maven Central releases repository
  ## - Prepares stable versions for production deployment
  ###############################################################################
  publish_rc:
    executor: localstack/default
    steps:
      - frontend_build
      - frontend_test
      - manage_version
      - frontend_package
      - mvn_jar_deploy 

  ###############################################################################
  ## 🚀 PRODUCTION RELEASE JOB
  ## ==========================
  ## Publishes production releases to Maven Central and creates GitHub releases
  ## 
  ## Purpose: Deploy stable versions to production and create GitHub releases
  ## Used by: production_release workflow for main branch
  ## Publishes: X.Y.Z versions to releases repository
  ## Creates: Git tags and GitHub releases automatically
  ## 
  ## What it does:
  ## - Builds the complete frontend project
  ## - Manages versions (stable release)
  ## - Runs comprehensive tests for production validation
  ## - Deploys to Maven Central releases repository
  ## - Creates Git tags (vX.Y.Z) for version tracking
  ## - Creates GitHub releases with automated notes
  ###############################################################################
  publish_release:
    executor: localstack/default
    steps:
      - frontend_build
      - manage_version
      - frontend_test
      - frontend_package
      - mvn_jar_deploy
      - create_github_release

  ###############################################################################
  ## 🔥 HOTFIX RELEASE JOB
  ## ======================
  ## Publishes hotfix releases to Maven Central and creates GitHub releases
  ## 
  ## Purpose: Deploy critical bug fixes and security patches
  ## Used by: hotfix_release workflow for hotfix/* branches
  ## Publishes: X.Y.(Z+1) versions to releases repository
  ## Creates: Git tags and GitHub releases automatically
  ## 
  ## What it does:
  ## - Builds the complete frontend project
  ## - Manages versions (patch increment)
  ## - Runs comprehensive tests for hotfix validation
  ## - Deploys to Maven Central releases repository
  ## - Creates Git tags (vX.Y.Z+1) for version tracking
  ## - Creates GitHub releases with automated notes
  ## - Enables urgent production fixes
  ###############################################################################
  publish_hotfix:
    executor: localstack/default
    steps:
      - frontend_build
      - manage_version 
      - frontend_test
      - frontend_package
      - mvn_jar_deploy
      - create_github_release

###############################################################################
## WORKFLOWS (CI/CD Pipeline Orchestration)
## =======================================
## Workflows define when and how jobs are executed based on branch patterns and triggers.
## Each workflow implements a specific part of the GitFlow branching strategy.
###############################################################################
workflows:

  ###############################################################################
  ## 🧪 TEST ONLY WORKFLOW
  ## =====================
  ## Runs on feature branches and other non-protected branches
  ## 
  ## Purpose: Validate code quality and functionality before merging
  ## Triggers: Any push to branches NOT matching develop, main, release/*, hotfix/*
  ## Jobs: build → test (sequential execution)
  ## 
  ## What it does:
  ## - Builds the frontend project
  ## - Runs comprehensive tests
  ## - Generates coverage reports
  ## - Stores build artifacts and test results
  ###############################################################################
  test_only:
    jobs:
      - build:
          context: [ qqq-maven-registry-credentials, build-qqq-sample-app ]
          filters:
            branches:
              ignore: /(develop|main|release/.*|hotfix/.*|integration.*)/
            tags:
              ignore: /(version|snapshot)-.*/
      - test:
          context: [ qqq-maven-registry-credentials, build-qqq-sample-app ]
          requires:
            - build
          filters:
            branches:
              ignore: /(develop|main|release/.*|hotfix/.*|integration.*)/
            tags:
              ignore: /(version|snapshot)-.*/
      - integration_test:
          context: [ qqq-maven-registry-credentials, build-qqq-sample-app ]
          requires:
            - build
          filters:
            branches:
              ignore: /(develop|main|release/.*|hotfix/.*|integration.*)/
            tags:
              ignore: /(version|snapshot)-.*/

  ###############################################################################
  ## 📦 SNAPSHOT DEPLOYMENT WORKFLOW
  ## =================================
  ## Runs on develop branch to publish development snapshots
  ## 
  ## Purpose: Provide nightly builds for developers and QA testing
  ## Triggers: Push to develop branch
  ## Publishes: X.Y.Z-SNAPSHOT versions to Maven Central snapshots repository
  ## Jobs: mvn_deploy (Maven Central publishing)
  ## 
  ## What it does:
  ## - Builds and tests the frontend project
  ## - Manages versions (Maven + NPM sync)
  ## - Deploys to Maven Central snapshots
  ## - Enables continuous integration and nightly builds
  ###############################################################################
  deploy_snapshot:
    jobs:
      - mvn_deploy:
          context: [ qqq-maven-registry-credentials, build-qqq-sample-app ]
          filters:
            branches:
              only: 
                - develop

  ###############################################################################
  ## 🧪 RELEASE CANDIDATE WORKFLOW
  ## =============================
  ## Runs on release/* branches to publish release candidates
  ## 
  ## Purpose: Provide RC builds for QA testing and stakeholder review
  ## Triggers: Push to any branch matching release/* pattern
  ## Publishes: X.Y.0-RC.n versions to Maven Central releases repository
  ## Jobs: publish_rc (build, test, RC artifact creation)
  ## 
  ## What it does:
  ## - Builds and tests the frontend project
  ## - Manages versions (RC increments)
  ## - Deploys to Maven Central releases
  ## - Prepares stable versions for production
  ###############################################################################
  release_candidate:
    jobs:
      - publish_rc:
          context: [ qqq-maven-registry-credentials, build-qqq-sample-app ]
          filters:
            branches:
              only:
                - /release\/.*/

  ###############################################################################
  ## 🚀 PRODUCTION RELEASE WORKFLOW
  ## ===============================
  ## Runs on main branch to publish production releases
  ## 
  ## Purpose: Deploy stable versions to production and create GitHub releases
  ## Triggers: Push to main branch (typically after merging release branches)
  ## Publishes: X.Y.Z versions to Maven Central releases repository
  ## Creates: Git tags (vX.Y.Z) and GitHub releases automatically
  ## Jobs: publish_release (build, test, Maven Central deploy, GitHub release)
  ## 
  ## What it does:
  ## - Builds and tests the frontend project
  ## - Manages versions (stable release)
  ## - Deploys to Maven Central releases
  ## - Creates Git tags for version tracking
  ## - Creates GitHub releases with automated notes
  ###############################################################################
  production_release:
    jobs:
      - publish_release:
          context: [ qqq-maven-registry-credentials, build-qqq-sample-app ]
          filters:
            branches:
              only: 
                - main
            tags:
              only: 
                - /v.*/

  ###############################################################################
  ## 🔥 HOTFIX RELEASE WORKFLOW
  ## ===========================
  ## Runs on hotfix/* branches to publish urgent production fixes
  ## 
  ## Purpose: Deploy critical bug fixes and security patches
  ## Triggers: Push to any branch matching hotfix/* pattern
  ## Publishes: X.Y.(Z+1) versions to Maven Central releases repository
  ## Creates: Git tags (vX.Y.(Z+1)) and GitHub releases automatically
  ## Jobs: publish_hotfix (build, test, Maven Central deploy, GitHub release)
  ## 
  ## What it does:
  ## - Builds and tests the frontend project
  ## - Manages versions (patch increment)
  ## - Deploys to Maven Central releases
  ## - Creates Git tags for version tracking
  ## - Creates GitHub releases with automated notes
  ## - Enables urgent production fixes
  ###############################################################################
  hotfix_release:
    jobs:
      - publish_hotfix:
          context: [ qqq-maven-registry-credentials, build-qqq-sample-app ]
          filters:
            branches:
              only: 
                - /hotfix\/.*/
